#+TITLE: Project file for tree-lang
#+AUTHOR: Bart Frenk
#+EMAIL: bart.frenk@gmail.com

* Contents
** Roadmap
*** DONE Add comparison operators to the language
CLOSED: [2018-04-26 Thu 13:42]
*** DONE Write an interpreter
CLOSED: [2018-04-26 Thu 13:43]
*** TODO Add string interpolation
Maybe use {} interpolation syntax, e.g., "Welcome to {$location.city}!"
*** DONE Write a typechecker
CLOSED: [2018-04-24 Tue 23:12]
We need to have an entry in the type context for all the fields of the context
macros in the program. Such entries are just trees with the types at the
leaves.
*** TODO Write a totality checker
By this I mean a checker that checks whether every branch of the program has the
correct assignments.
*** TODO Deduplicate the assignments that come out of the interpreter
*** TODO Include position in the error message
*** Add data constructors
**** TODO tuples
**** TODO lists
** Ideas
*** Haxl interpreter
Write an interpreter from programs into the Haxl monad. It would then probably
be wise to define data sources for every top-level context macro name. The tail
of the context macro names is then used to access the resulting object.

This would allow for easy concurrent data access.
*** What about failures to dereference context macros?
The language should have a good concept of unknowns. Dereferencing the context
macros might fail.
*** Can we take into account optimal adaptive placeholder selection into the language?
This is very preliminary. I am thinking of something like =title = [{"Welcome!",
"Hey!"}|gender]=, to automatically select the title from the two
options given based on the gender.



